#include <iostream>
#include <cstdlib>
using namespace std;

/*
	Для работы с динамической памятью можно воспользоваться средствами языка С.
	В стандартной библиотеке языка С присутствует ряд функций для работы с динамической памятью:
		1. Функция malloc - выделяет участок памяти указанного размера в куче
		2. Функция calloc - выделяет участок памяти указанного размера в куче, но при этом заполняет 
								выделенный участок памяти нулями
		3. Функция realloc - перераспределяет участок памяти
		4. Функция free - освобождает выделенную ранее память


	Для использования этих функций необходимо подключить заголовочный файл cstdlib.

*/

void main ()
{
	/*
		Функция malloc - выделяет участок памяти указанного размера в куче.
			void* malloc (size_t size);

			Где: 
				size - размер в байтах для выделяемого участка памяти

			Возвращаемое значение:
				в случае успеха - указатель на начало выделенного блока памяти.
				в случае неудачи - нулевой указатель.
	*/

	int sizeOfArray = 10;

	int *p = (int*)malloc (sizeOfArray * sizeof (int));

	for (int i = 0; i < sizeOfArray; i++)
	{
		p[i] = i + 1;
		cout << p[i] << endl;
	}
	

	/*
		Функция free - освобождает выделенную ранее память
			void free (void* ptr);

			Где:
				ptr - адрес начала выделенного (посредством malloc, calloc или realloc) блока памяти.
			
			Если ptr - это адрес не выделенного динамически блока памяти - поведение неопределено.
			Если ptr - нулевой указатель функция ничего не делает.
	*/

	free (p);

	cout << endl << endl;
	cout << "calloc test: " << endl;
	/*
		Функция calloc - выделяет участок памяти указанного размера в куче, но при этом заполняет 
								выделенный участок памяти нулями

				void* calloc (size_t num, size_t size);
					Где:
						num - кол-во элементов размера size
						size - размер одного элемента
	
	*/
	p = (int*)calloc (sizeOfArray, sizeof (int));
	
	for (int i = 0; i < sizeOfArray; i++)
	{
		cout << p[i] << endl;
	}

	free (p);


	cout << endl << endl;
	cout << "realloc test: " << endl;
	/*
		Функция realloc - перераспределяет участок памяти. Расширяет либо сужает блок памяти, в зависимости от требуемого размера.

			void* realloc (void* ptr, size_t size);
				Где: 
					ptr - указатель на выделенный ранее блок памяти
					size - новый требуемый размер

			Функция попробует перераспределить память, выделив новый блок указанного размера.
			Значения из старого блока сохраняются.
			Если новый размер меньше старого - значения, выходящие за рамки нового размера не будут сохранены.
			
			Возвращаемое значение:
				- адрес нового выделенного блока памяти, если функции не удалось расширить или сжать на месте 
					или
				- адрес того же участка памяти, если функции удалось изменить размер блока не выделяя новую память
					или
				- нулевой указатель, если функции не удалось перераспределить память

			Если ptr == NULL, то функция ведёт себя как malloc.
	*/

	p = (int*)malloc (sizeOfArray * sizeof (int));

	for (int i = 0; i < sizeOfArray; i++)
	{
		p[i] = i + 1;
		cout << p[i] << endl;
	}

	p = (int*)realloc (p, (sizeOfArray += 5) * sizeof (int));
	
	cout << "After realloc: " << endl;

	for (int i = 0; i < sizeOfArray; i++)
	{
		cout << p[i] << endl;
	}

	free (p);
}