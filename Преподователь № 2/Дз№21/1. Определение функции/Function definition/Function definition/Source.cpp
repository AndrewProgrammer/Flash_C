#include <iostream>
using namespace std;


// В качестве типа возвращаемого значения стоит void - это значит, что функция ничего не возвращает.
// void - это пустой тип данных. Переменные такого типа создавать нельзя. Означает пустоту. Значения типа void не существует.
// Список параметров в данном случае пуст, т.е. функция не принимает аргументов.
// Однако, скобки всё равно ОБЯЗАТЕЛЬНЫ! 
void printHello ()
{
	// В качестве тела здесь одна единственная инструкция.
	// Но здесь НЕ ДЕЙСТВУЕТ правило, как в управляющих конструкциях (if, while...) и фигурные скобки вокруг тела функции обязательны!!!
	cout << "Hello!" << endl;
}

void main ()
{
	/*
		Функции позволяют СТРУКТУРИРОВАТЬ программу по блокам кода, которые выполняют конкретную, четкую задачу!

		Функция - это группа инструкций, которая имеет определенный ИДЕНТИФИКАТОР (имя), и может быть вызвана из другой точки программы.

		Общий синтаксис определения функции:

		тип имя (параметр1, параметр2, ..., параметрN) { тело_функции }

			Где:
				- тип - это тип данных у значения, которое будет возвращено функцией
				- имя - это идентификатор (имя) для функции
				- параметры (0 или больше) - это аргументы, которые функция принимает при вызове, и которые нужны ей в работе.
					Каждый аргумент - это локальная переменная в функции со своим типом и значением. Аргументы при объявлении и определении функции разделены запятыми.
					Если аргументов для работы функции не требуется скобки можно оставить пустыми. В таком случае передавать функции в качестве аргументов ничего нельзя.

				- тело функции - набор инструкций, которые будут выполнены при вызове функции


		Правила работы с функциями: 
			* Функция должна быть объявлена до первого использования, иначе будет ошибка компиляции, ибо компилятор не будет знать о существовании функции.
			* Нельзя определить функцию внутри функции!
	
	*/


	// Вызываем функцию printHello
	// Обратите внимание на оператор () - это оператор вызова функции
	// Если его не написать при вызове, компилятор подумает, что это переменная, а не функция.
	// Функция printHello не принимает аргументов, посему скобки пустые.
	
	// В момент когда выполнение программы дойдёт до этой строчки, управление будет передано в функцию printHello и начнет выполнение код,
	//	который определен внутри функции printHello
	printHello ();

	// Вызовем нашу функцию ещё раз
	printHello ();


	// Функция printHello объявлена с типом возвр. значения void, это значит, что она ничего не возвращает.
	// Значит в результате, на её место НЕ БУДЕТ подставлено значение. Соответственно void-функции не могут быть частью выражения.
	// Они могут стоять только как отдельные инструкции.

	// int someVar = 2 + printHello ();   // Раскомментируйте чтобы увидеть красоту ошибки компиляции

	// printHello2 (); // Что такое printHello2? Ничего не знаю... Ошибка компиляции!

}  


// Эту функцию нельзя будет использовать из функции main, пока данная функция определена за ней.
// В функции main компилятор ещё ничего не знает о функции printHello2
// Для того, чтобы воспользоваться этой функцией, её объявление необходимо поместить до функции main.
void printHello2 ()
{
	cout << "Hello2" << endl;
}