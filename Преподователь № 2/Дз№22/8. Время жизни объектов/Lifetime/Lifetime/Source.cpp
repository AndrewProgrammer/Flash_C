#include <iostream>
using namespace std;

/*
	Существует понятие "время жизни" объекта. (Lifetime)
	Это характеристика, которая определяет когда объект будет создан и когда уничтоженю. 
	Другими словами - период, в течении которого существует объект.


	Есть локальное время жизни объекта и глобальное время жизни объекта.

	Если у объекта ЛОКАЛЬНОЕ время жизни, то объект существует до тех пор, пока выполнение программы находится в блоке, в котором был создан объект.
	При выходе из блока - объект уничтожается. 
	

	Если у объекта ГЛОБАЛЬНОЕ время жизни, то объект существует до тех пор, пока работает программа. 
	Такой объект будет уничтожен после закрытия программы.
*/

// Переменная с глобальной областью видимости (global scope) видна во всей программе, вне зависимости от функций.
// Имеет ГЛОБАЛЬНОЕ время жизни. Создается при старте программы и уничтожается при выходе из программы.
int number = 2;


// Прототип для функции foo
void foo (); 

void main ()
{
	// Переменные с локальной областью видимости (local scope) - видны только в пределах блока {}
	// Имеют ЛОКАЛЬНОЕ время жизни - создаются при входе в блок, и уничтожаются при выходе из блока
	int number = 1, integerValue = 15;

	// Хоть в данном случае и совпадает так, что переменные с локалькой обл. видимости имеют локально время жизни
	// ЭТО ДВА РАЗНЫХ ПОНЯТИЯ!  (см. ниже)


	foo ();
	foo ();
	foo ();
	foo ();
}


void foo ()
{
	// Переменная с локальной областью видимости (local scope) - видна только в пределах блока (в пределах функции в данном случае)!
	// ОДНАКО! Имеет ГЛОБАЛЬНОЕ ВРЕМЯ ЖИЗНИ! Это значит, что при выходе из функции переменная не уничтожится.
	// Глобальное время жизни в данном случае задает ключевое слово static!
	// Инициализатор не указан явно, однако ВСЕ переменные с глобальным временем жизни неявно инициализируются 0
	static int counter;

	// В простонародье такие переменные с локальной обл. видимости, но с глобальным временем жизни называют статическими 
	//																		(из-за кл. слова static при определении)
	// Статические переменные создаются ПРИ ПЕРВОМ ВЫЗОВЕ функции
	// а уничтожаются при ЗАКРЫТИИ ПРОГРАММЫ


	// Из-за того, что переменная статическая (имеет глобальное ВРЕМЯ ЖИЗНИ, но локальную ОБЛАСТЬ ВИДИМОСТИ)
	// эта переменная не будет уничтожена при выходе из функции
	// При следующем вызове функции значение переменной сохранится
	cout << "foo() call number #" << ++counter << endl;
}