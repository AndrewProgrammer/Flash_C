#include <iostream>
using namespace std;

/*
	Существует в программировании понятие "область видимости".
	Область видимости - это фрагмент кода программы, внутри которого можно обратиться к объекту (переменной, массиву и т.д.).
	Существует локальная область видимости (local scope), глобальная область видимости (global scope, external linkage)
	и область видимости модуля (область видимости файла) (file scope, internal linkage).

	К объектам с ЛОКАЛЬНОЙ областью видимости можно обратиться только внутри соответствующего блока кода.
	Сюда относятся обычные объекты, которые создаются внутри функции (параметры, обычные переменные), или внутри любого блока в {}.

	К объектам с ГЛОБАЛЬНОЙ областью видимости можно обратится из любой точки программы.
	Например, если переменная ГЛОБАЛЬНАЯ - то к ней можно обратится из любой функции, которая есть в программе.
	В том числе из функции, которая определена в другом файле с кодом (.cpp).

	К объектам с областью видимости файла можно обратится только из текущего файла с кодом (.cpp).

	Объекты, которые определяются ВНУТРИ блока кода имеют ЛОКАЛЬНУЮ область видимости.
	Объекты, которые определяются ВНЕ блоков кода (то есть вне {}, не внутри функций) имеют глобальную область видимости.
	Область видимости файла можно задать ГЛОБАЛЬНОМУ объекту при помощи ключевого слова static.
*/


// Определяем глобальную переменную number.
// К этой переменной можно получить доступ из любой функции программы, в том числе и из другого .cpp файла
int number = 1;

// Если глобальная переменная не инициализируется явно, то её значение 0! 
// Мусорных значений не будет в глобальных переменных.
int secondNumber;

// Определяем глобальную переменную anotherNumber, НО с областью видимости внутри ФАЙЛА
// В отличии от обычной глобальной переменной, к этой нельзя будет получить доступ из другого .cpp файла в проекте
// При попытке получить доступ из другого файла, линковщик сделает вид, что не видит этой переменной
// В данном .cpp файле работа с ней аналогична обычной глобальной переменной
static int anotherNumber = 18;


void foo ()
{
	// Объект с локальной областью видимости, к нему можно обратится только внутри фукнции foo
	// Если существует объект с таким же идентификатором, но в другой области видимости, то предпочтение будет отдано локальному объекту!

	int number = 5;

	// Выводим локальную переменную number
	cout << "number from foo(): " << number << endl;
}


void bar ()
{
	// Пытаемся обратится к идентификатору number
	// Локального объекта с таким идентификатором нет, смотрим есть ли глобальный
	// Есть глобальный, значит обращение производится к глобальному объекту
	cout << "number (global) from bar():" << number << endl;
}

void main ()
{
	// Определяем локальную переменную number
	int number = 2;

	// Обращаемся к локальной переменной number
	cout << "number from main(): " << number << endl;

	cout << "=======================================\n";

	// Вызываем функцию foo
	foo ();
	// Вызываем функцию bar
	bar ();

	cout << "=======================================\n";

	number = 10; // Меняем значение локальной переменной number


	// Для того, чтобы обратится к глобальной переменной, минуя локальную, можно воспользоваться оператором разрешения области видимости :: (scope resolution operator)
	::number = -8; // Изменяем ГЛОБАЛЬНУЮ переменную number

	cout << "number in main(): " << number << endl; // Выводим ЛОКАЛЬНУЮ переменную number
	cout << "global number: " << ::number << endl;	// Выводим ГЛОБАЛЬНУЮ переменную number


	cout << "anotherNumber global(static) variable: " << anotherNumber << endl;


	cout << "=======================================\n";

	{
		// Определяем локальную переменную number в искусственно созданой области видимости
		int number = 87;

		cout << "Local number: " << number << endl;
	}
	cout << "number from main(): " << number << endl;
	
}