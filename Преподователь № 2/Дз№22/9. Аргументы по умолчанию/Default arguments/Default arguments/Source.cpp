#include <iostream>
using namespace std;


/*
	У функции может быть несколько аргументов. 
	До сего момента все аргументы были обязательны, если функция принимает 3 аргумента, то при вызове нужно передать ровно 3 аргумента.
	Не больше и не меньше.
	Однако, такое поведение не всегда нужно. Иногда бывает необходимо сделать несколько аргументов, которые имеют значения по умолчанию.

	То есть, если при вызове, этот аргумент не будет передан, то будет использоваться значение по умолчанию.
	
	Синтаксис объявления функции с аргументом по умолчанию:

	тип имя(тип_арг имя_арг = значение_по_умолчанию);

*/

// У функции 2 аргумента: первый обязательный, второй - необязательный. Если при вызове будет опущен второй параметр будет взято значение по умолчанию. 
// Если второй параметр при вызове будет указан явно - будет взято указанное значение.
int sumOfTwo (int first, int second = 2);

// Значения по умолчанию могут быть заданы для нескольких аргументов.
// Правило одно - они должны быть в конце списка аргументов и не прерываться обязательными аргументами.
int sumOfThree (int first, int second = 1, int third = 2);

// Ошибка! Аргументы по умолчанию должны быть в конце списка аргументов и не должно быть разрыва с обязательным аргументом
//int wrongSum (int first = 1, int second, int third = 3);


// Всего один аргумент, и тот имеет значение по умолчанию. Возможен даже такой вызов: factorial(), компилятор увидит что есть значение по умолчанию,
// и сгенерирует вызов со значением по умолчанию: factorial(1)
int factorial (int number = 1);

void main ()
{
	// Указан явно только первый параметр, который обязателен
	// Второй параметр не указан, значит будет взято значение по умолчанию
	cout << "sumOfTwo(3): " << sumOfTwo (3) << endl;

	// Второй параметр указан явно, значение по умолчанию проигнорируется
	cout << "sumOfTwo(3, 5): " << sumOfTwo (3, 5) << endl;

	// Первый параметр обязателен, для него не задано значения по умолчанию. Ошибка компиляции!
	// cout << "sumOfTwo(): " << sumOfTwo () << endl;

	int fVal = 1, sVal = 2;
	// Первый и второй параметры указаны явно. Для третьего будет взято значение по умолчанию.
	cout << "sumOfThree(1, 2): " << sumOfThree (fVal, sVal) << endl; // Компилятор генерирует следующий вызов: sumOfThree (fVal, sVal, 2);


	// Первый параметр указан явно. Для остальных будет взято значение по умолчанию.
	cout << "sumOfThree(1): " << sumOfThree (fVal) << endl; // Компилятор генерирует следующий вызов: sumOfThree (fVal, 1, 2);

	// Аргументов при вызове не передаем, но компилятор видит, что функция принимает 1 аргумент и у того есть значение по умолчанию
	// Генерируется следующий вызов: factorial(1)
	cout << "factorial(): " << factorial () << endl;

	// Передаем явно аргумент при вызове
	cout << "factorial(5): " << factorial (5) << endl;
}


// Обратите внимание, что значения по умолчанию указываются ЛИБО при объявлении ЛИБО при определении
// И там и там вместе - НЕЛЬЗЯ
int sumOfTwo (int first, int second)
{
	return first + second;
}


int sumOfThree (int first, int second, int third)
{
	return first + second + third;
}

int factorial (int number)
{
	if (number < 0)
		return -1;

	int result = 1;

	for (int i = 2; i <= number; i++)
	{
		result *= i;
	}

	return result;
}