#include <iostream>

using namespace std;

// Указатель - это переменная, содержащая адрес другой переменной. Так как указатель содержит адрес 
// объекта, это дает возможность косвенного доступа к этому объекту через указатель.

void main()
{
    // Синтаксис объявления указателя:
    //      базовый_тип_указателя* имя_указателя;
    // базовый_тип_указателя - любой из существующих типов данных.
    // имя_указателя - любое имя, которое подчиняется "правилам именования переменных".

    bool* pBool;
    int* pInt;
    double* pDouble;

    // Адрес переменной - это целое число, которое обозначает смещение значение переменной от начала 
    // памяти.

    // Размер указателя равен размеру машинного слова.

    // Базовый тип указателя означает, что в указатель можно записать адреса переменных только 
    // этого типа.

	 // & - унарный оператор взятия адреса. Этот оператор возвращает адрес объекта.
    int nNumber = 7;

    cout << "Value of nNumber: " << nNumber << endl;
    cout << "Address of nNumber: " << &nNumber << endl << endl;

    // Запись адреса переменной в указатель.
    int* pPointer = &nNumber;

    cout << "Value of ptr: " << pPointer << endl;
    cout << "Address of ptr: " << &pPointer << endl;

    // Схема размещения элементов в памяти.
    //
    //  1010    1014    1018    1022    1026    1030    1034    1038    1042    1046    1050    1054
    // ---------------------------------------------------------------------------------------------
    //   |       |       |   7   |       |       | 1018  |       |       |       |       |       |
    // ---------------------------------------------------------------------------------------------
    //                    nNumber                pPointer

	 // * - унарный оператор разыменования. Этот оператор возвращает значение, которое находится по 
    // адресу, записанному в указателе.

    // Использование операции разыменования для того, чтобы изменить значение, на которое указывает 
    // указатель.
    *pPointer = 7;

    cout << "Value of nNumber: " << nNumber << endl;
    cout << "Value of nNumber: " << *pPointer << endl;

	// Указателю можно присваивать только адреса переменных базового типа указателя и число 0.

    // Если указатель не инициализируется адресом существующей переменной, то его необходимо, 
    // обнулить, то есть записать в него 0. Нулевой адрес является зарезервированным системой, 
    // поэтому созданные переменные никогда не получат такой адрес.
    int* pPointer1 = 0;
    int* pPointer2 = 0;
    double* pPointer3 = 0;

    pPointer1 = &nNumber;

    // При присваивании адресов происходит копирование значения правого указателя в левый, то есть 
    // адрес из правого указателя скопируется в левый указатель. После этого оба указателя будут 
    // содержать адрес одной и той же области памяти.
    pPointer2 = pPointer1;

    cout << "Value of nNumber: " << *pPointer1 << endl;
    cout << "Value of nNumber: " << *pPointer2 << endl;

    // При попытке присвоить значение одного указателя другому, при том, что у них разные базовые 
    // типы, произойдет ошибка на этапе компиляции.
    //pPointer3 = pPointer1; // Ошибка на этапе компиляции.

    // Схема размещения элементов в памяти.
    //
    //  1010    1014    1018    1022    1026    1030    1034    1038    1042    1046    1050    1054
    // ---------------------------------------------------------------------------------------------
    //   | 1018  |       |   7   |       |       | 1018  |       |       |       |       |       |
    // ---------------------------------------------------------------------------------------------
    //   pPointer2        nNumber                pPointer1

}