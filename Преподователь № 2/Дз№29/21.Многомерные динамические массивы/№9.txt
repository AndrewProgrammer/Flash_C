#include <iostream>
#include <time.h>

using namespace std;

int ** Create2Array(int rows, int cols);
void Init2Array(int**mas, int rows, int cols);
void Print2Array(int **mas, int rows, int cols);
void AddColByIndex(int **mas, int r, int &c, int index);
void InitAr(int*mas, int size);
void** DeleteMassiv(int**mas, int r);
void main()
{
	int size = 10, size1 = 10;
	int r, c;
	cout << "Enter rows" << endl;
	cin >> r;
	cout << "Enter cols" << endl;
	cin >> c;
	int** mas = Create2Array(r, c);
	Init2Array(mas, r, c);
	Print2Array(mas, r, c);
	mas = AddNewElemEnd(mas, r, c);
	Print2Array(mas, r, c);
	system("pause");
	int index;
	cout << "Enter index: \n";
	cin >> index;
	AddColByIndex(mas, r, c, index);
	Print2Array(mas, r, c);
	system("pause");
}
void InitAr(int*mas, int size)
{
	for (size_t i = 0; i < size; i++)
	{
		mas[i] = rand() % 10;
	}
}
void Print2Array(int**mas, int rows, int cols)
{
	for (size_t i = 0; i < rows; i++)
	{
		for (size_t j = 0; j < cols; j++)
		{
			cout << mas[i][j] << "\t";

		}
		cout << endl;
	}
	cout << endl;
}
int*AddElemByIndex(int*mas, int&size, int index, int value)
{
	int *temp = new int[++size];
	for (int i = 0; i < size; i++)
	{
		if (i < index)
			temp[i] = mas[i];
		else if (i == index)
		{
			temp[i] = value;
		}
		else
			temp[i] = mas[i - 1];
	}
	delete[]mas;
	return temp;
}
int ** AddNewRowToIndex(int **ar, int&r, int&c, int index)
{
	int**temp = new int*[++r];
	for (int i = 0; i < r; i++)
	{
		if (i < index)
			temp[i] = ar[i];
		else if (i == index)
		{
			temp[i] = CreateArray(c);
			InitArray(temp[i], c);
		}
		else
			temp[i] = ar[i - 1];
	}
	delete[]ar;
	return temp;
}
void AddColByIndex(int **mas, int r, int &c, int index)
{
	for (int i = 0; i < r; i++)
	{
		mas[i] = AddElemByIndex(mas[i], c, index, rand() % 100);
		c--;
	}
	c++;
}
void Init2Array(int**mas, int rows, int cols)
{
	for (size_t i = 0; i < rows; i++)
	{
		for (size_t j = 0; j < cols; j++)
		{
			mas[i][j] = rand() % 10;
		}
	}
}

int ** Create2Array(int rows, int cols)
{
	int ** temp = new int*[rows];
	for (size_t i = 0; i < rows; i++)
	{
		temp[i] = new int[cols];
	}
	return temp;
}
void** DeleteMassiv(int**mas, int r)
{
	for (int i = 0; i < r; i++)
	{
			delete[] mas[i];
	}
	delete[] mas;
	return 0;
}