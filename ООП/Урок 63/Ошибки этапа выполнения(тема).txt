Обработка исключительных ситуаций - Exception(Исключение)
Для реализации применятся 3 ключевых слова: try,catch,throw.
Нельзя ставить между try и catch что то...
Не должно быть одинаковых сигнатур в catch.
try{}//(попробуй выполнить код не будет ли в нем ошибок)
int a , b;
try // //(попробуй выполнить код не будет ли в нем ошибок
{
	int c = Divide(a,b);
	cout << "Hello";//Я не увижу Hello
}
catch(int e) // Отлавливаем ошибку 
{
	//Починка программы (алгоритм починки)
}
int Divide(int a , int b)
{
	if ( b == 0)
	{	
		int error = 3;//3 в данном случаи ошибка(как бы код), смс, которое по 3 мы должны исправлять
		throw error;//Функция дальше не будет выполнятся, она завершается и попадает на место своего вызова
	}
	return a / b;
}
Еще пример:
try
{
	try
	{
		throw 1;
	}
	catch(int a)
	{
	//Алгоритм решения
	}
}
catch(char a)
{
	
}
-------------------------------------------------------------------
Stack unwind - раскрутка стека
При использовании раскрутки стека деструкторы сами чистятся для локальных объектов.
-------------------------------------------------------------------
int a = 0;
cin >> a;
try
{
	int * p = new int;
	if(a == 0)
	{
		throw 1;	
	}
	*p = 7;
	delete p;
}
catch(int e)
{
}
--------------------------------------------------------------------
Все динамические объекты должны быть обернуты в соответствующие классы(типо классы обертки), то есть в конструкторе получение ресурсов, а в деструкторе уничтожение ресурсов(коректное)
Называются такие классы RAII.
---------------------------------------------------------------------
catch(...)//Ловит любые програмные исключения, кроме апаратных
-----------------------------------------------------------------------
catch(int e)
{
 //Алгоритм решения
throw;//Хочу просто пробросить дальше (следовательно дальше должен быть новый try с catch, если нет ошибка).
}
-----------------------------------------------------------------------
Если мы хотим повторить try catch то используем цикл.
--------------------------------------------------------------------------
например у нас есть класс базовый:
Exception описываем ошибку. 
Exception от него два дочерних:
ArgumentException ArifmethicException:
От ArifmethicException дочерний DividebyZero.
Теперь код 
try
{

}
catch(DivideByZero &e)
{

}
throw DivideByZero();//Анонимный объект
----------------------------------------
Проверка всех аргументах а после этого выполнение.
Нельзя выбрасывать Exception из деструкторов,так как будет 2 потока выбраса стека, следовательно это убьет процесс.
Если выбрасывается Exception из конструктора, деструктор вызывается для всех полей объекта, а вот деструктор для объекта не вызывается.Решение умный указатель
Exception дестуктор для полей класса объкта полностью удалится.
---------------------------------------------------
В экзамене должны быть Exception
---------------------------------------------------