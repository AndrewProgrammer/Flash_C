Volatile такой же спецификатор как const, нужен компилятору для того чтобы дать ему понять что переменная с спецификатором volatile может придти с разных мест.
------------------------------------
Пространство имен нужно для того чтобы решить проблему колизию имен
Пространство имен - область видимости, которая ограничивает набор идентификаторов.
Пространство имен применяются для структурирования приложения.
Пространство имен могут быть вложены.
Using namespace ... подключаем только в cpp.
Писать в хедерах нужно писать так примерно N1::N2::F();
Если подключать все using в хедерах, то не известно будет ли ошибка в будущем когда, мы будем подключать хедеры в другие файлы.
Можно писать одинаковые пространство имен.
Например:
namespace N1
{
	void F();
}
F();//Не сработает так как глобальная область видимости.
N1::F();//резрешает использования F в namespace N1;
namespace N2
{
	N1::F();//резрешает использования F в namespace N1;
	void F();
	void X()
	{
		F();//Вызовется F в namespace N2
	}
	::F()//С глобальной области видимости.
}
-----------------------------------------------------------------
C++11 
using - может делать шаблонный псевдоним.
using - можно использовать как typedef:
typedef unsigned int uint;//Идентично
using uint = unsigned int;//Идентично
typedef void//Тип данных void (*//Указатель на функцию Func)(int//Аргументы) // принимает тип указателя на функцию.
using Func = void(*)(int);//Идентично
Было до С++11
typedef Array<int> IntAr;
После С++11
template < typename T>//Даю название шаблону и могу его настроить
using Collection = Array<T, int>;//Можно дописать int
Collection<char> t;
---------------------------------------------------------------------