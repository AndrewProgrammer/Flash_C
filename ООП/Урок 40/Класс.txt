Класс не существует в памяти, предназначен для реализации характеристик ооп и связывать их между собой
Встраиваемые методы- это методы которые копируют код из метода и вставляют в то место где происходит компиляция.
Struct - нужны для объединения разнотипных данных под одним именем и пользоваться ими целиком.От класса отличается тем что спецификатор доступа в struct по умолчанию public а в классе могут быть private,protected.
Метод - это функция внутри класса, предназначена для работы с данными этого класса.
Объект - экземпляр класса,вид переменной.
Интерфейс - используемая часть,предназначенная для взаимодействия двух систем.
Класс - это описания несуществуюшей сущности.
Синтаксис класса - class имя_класса(идентификатор) { Список компонентов!(поля класса - (Пример: int d;))};
Символ(.)(->) - селектор полей класса.
:: - операция разрешения контекста для идентификации класаа при определении метода класса. 
:: - оператор разрешения области видимости.
Спецификаторы доступа - конструктор который позволяет определить уровень доступа из вне к члену классу.Они бывают: в классе (private,protected,(struct - по умолчанию)public - интерфейс класса)
Аксессоры - методы для доступа к полям класса.
Set - модификатор
Get - инспектор.
Валидация - проверка на корректность данных.
Константный метод - это метод в котором нельзя нечего изменять(то есть изменять данные), this - это константный указатель,ему нельзя нечего присвоить, к нему можно только обращатся,работает через (->)(Модифицирует тем что добавляет к this добавляется const то есть константный указатель  на константную переменную, а до этого было константный указатель не на константную переменную).
Статический метод - это метод который может быть вызван без создания объекта класса.
Конструктор - специальный метод который вызывается при создании объекта в любом случаи, у него нет возвращаемого значения имеет такое же имя как и класс.Необходим для настройки процесса инициализации.
Конструктор без параметров(default) - конструктор по умолчанию 
Параметризированый конструктор - конструктор который принимает в себя аргументы(параметры).
Перегрузка конструкторов - тоже самое что и перегрузка функций
Деструктор - это специальный метод класса, который вызывается при разрушении объекта.ТОЛЬКО ОДИН, он вызывается не явно - поэтому невозможно его перегрузить.
Присваивание - это задание нового значения на этапе создания.
Все методы присутсвуют только в одном экземпляре, они не входят в размер объекта.
У любого класса есть конструктор и деструктор.
Список инициализации - конструкция которая позволяет проинициализировать поля класса.
Список инициализаторов - необходим для того чтобы проинициализировать поля класса.
Инициализация - это присваивание объекта к другому объекту на этапе написания кода.
В каком порядке будут проинициализированы статические поля класса - 1)Порядок создания полей класса.2) Если поля класса находяться в 1 единицы трансляции(Например: Я объявил x и y, а потом инициализировал y и x то порядок будет первый y потом x.  
Операторы класса можно перегружать как метод класса и как функция(зачастую глобальная).
Перегружать операторы необходимо для того чтобы реализовать статический полиморфизм и чтобы внедрить компоненты уже в существующую систему(подсистему).
Перегружать операторы можно перегружать 2 способами:
1)Как метод класса.
2)Как функция(глобальная функция).
Зачем нужна перегрузка операторов - для того чтобы использовать с новыми типами данных(Например у нас есть оператор меньше который используется в одном классе массив который сравнивает элементы массива, а мне нужно сравнить объект класса массив с новым объектом другого класса).
Побитовое копирование - это копирование всех полей объекта в другой объект.
Оператор копирования - нужно для того чтобы избежать проблему двойного удаления.
Делегирования конструкторов - перенаправления вызова с одного конструктора на другой.
Побитовое копирование - это копирование значения каждого поля объекта в сооствествующие поле другого объекта.
Конструктор копирование - нужен для того чтобы описать процесс создания одного объекта на основании другого(копирует один в другой).
Конструктор копирования нам нужен(вызывается не явно):
1)когда мы передаем объект класса в функцию по значению.
2)когда возвращается из функции объект класса ( по значению).
3)когда объект создается как копия другого объекта.
this - это константный указатель,ему нельзя нечего присвоить, к нему можно только обращатся,работает через (->).
this - это указатель на объект класса для которого был вызван не статический метод, и который не явно передается в этот метод.Неявно - это мы его не где не пишем но он там присутствует.
Основное предназначение указателя this - в том чтобы хранить в памяти только по одному экземпляру метода, но при этом внутри метода обращаться к полям нужного объекта.
this - хранит адрес объекта в памяти.
Константный метод - это метод который можно вызвать от константного объекта.
Статические поля - общие для всех объектов класса,если одни объект изменит его то все объекты имеют доступ.
Класс может содержать ссылки и указатели.